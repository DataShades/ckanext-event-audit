{"config":{"lang":["en"],"separator":"[\\s\\-\\.\\_]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#ckanext-event-audit","title":"ckanext-event-audit","text":"<p>This extension will capture and retain a comprehensive record of all changes within a CKAN app.</p>"},{"location":"#developer-installation","title":"Developer installation","text":"<p>To install ckanext-event-audit for development, activate your CKAN virtualenv and do:</p> <pre><code>git clone https://github.com/DataShades/ckanext-event-audit.git\ncd ckanext-event-audit\npip install -e .\npip install -r dev-requirements.txt\n</code></pre>"},{"location":"#tests","title":"Tests","text":"<p>To run the tests, do:</p> <pre><code>pytest --ckan-ini=test.ini\n</code></pre>"},{"location":"#license","title":"License","text":"<p>AGPL</p>"},{"location":"install/","title":"Installation","text":""},{"location":"install/#requirements","title":"Requirements","text":"<p>Compatibility with core CKAN versions:</p> CKAN version Compatible? 2.9 no 2.10 yes 2.11 yes master yes"},{"location":"install/#installation_1","title":"Installation","text":"<ol> <li> <p>Install the extension from <code>PyPI</code>:     <pre><code>pip install ckanext-event-audit\n</code></pre></p> </li> <li> <p>Enable the plugin in your CKAN configuration file (e.g. <code>ckan.ini</code> or <code>production.ini</code>):     <pre><code>ckan.plugins = ... event_audit ...\n</code></pre></p> </li> <li> <p>Run DB migrations:     <pre><code>ckan db upgrade -p event_audit\n</code></pre></p> </li> <li> <p>Configure the extension up to your needs and you're ready to go. See the documentation for more details about the configuration options.</p> </li> </ol>"},{"location":"interfaces/","title":"Interfaces","text":""},{"location":"interfaces/#ieventaudit","title":"IEventAudit","text":"<p>Extend functionality of ckanext-event-audit.</p> <p>Example: <pre><code>import ckan.plugins as p\n\nfrom ckanext.event_audit.interfaces import IEventAudit\nfrom ckanext.event_audit.repositories import AbstractRepository\nfrom ckanext.event_audit.exporters import AbstractExporter\n\nclass MyPlugin(p.SingletonPlugin):\n    p.implements(IEventAudit, inherit=True)\n\n    def register_repository(self) -&gt; dict[str, type[AbstractRepository]]:\n        return {\n            \"my_repo\": MyRepository,\n        }\n\n    def register_exporter(self) -&gt; dict[str, type[AbstractExporter]]:\n        return {\n            \"my_exporter\": MyExporter,\n        }\n\n    def skip_event(self, event: types.Event) -&gt; bool:\n        if event.category == \"api\" and event.action == \"status_show\":\n            return True\n\n        if event.category == \"model\" and event.action_object == \"Dashboard\":\n            return True\n\n        return False\n</code></pre></p>"},{"location":"interfaces/#event_audit.interfaces.IEventAudit.register_exporter","title":"<code>register_exporter()</code>","text":"<p>Return the exporters provided by this plugin.</p> Example <pre><code>def register_exporter(self):\n    return {\n        \"csv\": CSVExporter,\n    }\n</code></pre> RETURNS DESCRIPTION <code>dict[str, type[AbstractExporter]]</code> <p>mapping of exporter names to exporter classes</p>"},{"location":"interfaces/#event_audit.interfaces.IEventAudit.register_repository","title":"<code>register_repository()</code>","text":"<p>Return the repositories provided by this plugin.</p> Example <pre><code>def register_repository(self):\n    return {\n        \"my_repo\": MyRepository,\n    }\n</code></pre> RETURNS DESCRIPTION <code>dict[str, type[AbstractRepository]]</code> <p>mapping of repository names to repository classes</p>"},{"location":"interfaces/#event_audit.interfaces.IEventAudit.skip_event","title":"<code>skip_event(event)</code>","text":"<p>Skip an event.</p> <p>This method is called before writing the event to the repository.</p> Example <pre><code>def skip_event(self, event: types.Event) -&gt; bool:\n    if event.category == \"api\" and event.action == \"status_show\":\n        return True\n\n    if  event.category == \"model\"  and event.action_object == \"Dashboard\":\n        return True\n\n    return False\n</code></pre> RETURNS DESCRIPTION <code>bool</code> <p>True if the event should be skipped, False otherwise</p>"},{"location":"usage/","title":"Usage","text":"<p>To use an event audit in your extension, you should get an instance of the repository class. There are two ways to do this:</p> <ol> <li> <p>Using the <code>get_repo</code> function:</p> <pre><code>import ckanext.event_audit.utils as utils\n\nrepo = utils.get_active_repo()\n\nevent = repo.build_event({\"category\": \"xxx\", \"action\": \"xxx\"})\n\nrepo.write_event(event)\n</code></pre> <p>The <code>get_active_repo</code> function will return an instance of the active repository class that is configured in the CKAN configuration file.</p> </li> <li> <p>Using the <code>get_repo</code> function with a specific repository:</p> <pre><code>import ckanext.event_audit.utils as utils\n\nrepo = utils.get_repo(\"file\")\n\nevent = repo.build_event({\"category\": \"xxx\", \"action\": \"xxx\"})\n\nrepo.write_event(event)\n</code></pre> <p>The <code>get_repo</code> function will return an instance of the repository class that is specified in the argument. You can use this method to get a specific repository instance.</p> </li> </ol>"},{"location":"utils/","title":"Utility Functions","text":""},{"location":"utils/#event_audit.utils.get_active_repo","title":"<code>get_active_repo()</code>","text":"<p>Get the active repository.</p> <p>The active repository is the one that is currently configured in the extension configuration.</p> RETURNS DESCRIPTION <code>AbstractRepository</code> <p>The active repository.</p>"},{"location":"utils/#event_audit.utils.get_available_exporters","title":"<code>get_available_exporters()</code>","text":"<p>Retrieve a dictionary of available exporters.</p> <p>This function collects and returns a dictionary where the keys are exporter names (as strings) and the values are the corresponding exporter classes.</p> RETURNS DESCRIPTION <code>dict[str, type[AbstractExporter]]</code> <p>A dictionary mapping exporter names to their respective exporter classes.</p>"},{"location":"utils/#event_audit.utils.get_available_repos","title":"<code>get_available_repos()</code>","text":"<p>Retrieve a dictionary of available repositories.</p> <p>This function collects and returns a dictionary where the keys are repository names (as strings) and the values are the corresponding repository classes.</p> RETURNS DESCRIPTION <code>dict[str, type[AbstractRepository]]</code> <p>A dictionary mapping repository names to their respective repository classes.</p>"},{"location":"utils/#event_audit.utils.get_exporter","title":"<code>get_exporter(exporter_name)</code>","text":"<p>Retrieve an exporter class by name.</p> <p>This function retrieves an exporter class by name. If the exporter is not found, a ValueError is raised.</p> PARAMETER DESCRIPTION <code>exporter_name</code> <p>The name of the exporter to retrieve.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>type[AbstractExporter]</code> <p>The exporter class.</p>"},{"location":"utils/#event_audit.utils.get_repo","title":"<code>get_repo(repo_name)</code>","text":"<p>Retrieve a repository class by name.</p> <p>This function retrieves a repository class by name. If the repository is not found, a ValueError is raised.</p> PARAMETER DESCRIPTION <code>repo_name</code> <p>The name of the repository to retrieve.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>AbstractRepository</code> <p>The repository class.</p>"},{"location":"utils/#event_audit.utils.test_active_connection","title":"<code>test_active_connection()</code>","text":"<p>Test the connection to the active repository.</p> <p>When we test the connection, we store the result in the repository object, so we can reuse it later.</p> RETURNS DESCRIPTION <code>bool</code> <p>whether the connection is active</p>"},{"location":"configure/active_repo/","title":"Active repository","text":"<p>The event audit logs are stored in a configurable storages, we call them repositories.</p> <p>The default repository is <code>redis</code>, but it can be changed to a different one. To do this, we have to set the following configuration options in the CKAN configuration file:</p> <pre><code>ckanext.event_audit.active_repo = postgres\n</code></pre> <p>The following repositories are available:</p> <ol> <li><code>redis</code> - the default repository, stores logs in Redis.</li> <li><code>postgres</code> - stores logs in a PostgreSQL database.</li> <li><code>cloudwatch</code> - stores logs in AWS CloudWatch.</li> </ol> <p>If the <code>cloudwatch</code> repository is used, the extension will automatically create a log group in CloudWatch. Also, check the CloudWatch repository documentation for additional configuration options.</p>"},{"location":"configure/async/","title":"Asynchronous processing","text":"<p>To avoid blocking the main thread, the extension uses a separate thread to write the audit logs. A separate thread will be started automatically along with the CKAN application.</p> <p>The thread is responsible for storing the logs in the configured repository.</p> <p>By default, we're using the threaded mode. However, if you want to disable the threaded mode, you can do this by setting the following configuration option in the CKAN configuration file:</p> <pre><code>ckanext.event_audit.threaded_mode = false\n</code></pre> <p>Disabling the threaded mode will cause the extension to write the logs in the main thread. This can be useful for debugging purposes.</p> <p>Note, that pairing it with the <code>Cloudwatch</code> repository is not recommended, as it can block the main thread for a long time. Network operations can be slow and can cause the application to hang for a while.</p> <p>If your custom repository involves a network operations, it's recommended to keep the threaded mode enabled.</p>"},{"location":"configure/async/#batch-size","title":"Batch size","text":"<p>The extension writes the logs in batches. The batch size can be adjusted by setting the following configuration option in the CKAN configuration file:</p> <pre><code>ckanext.event_audit.batch.size = 50\n</code></pre> <p>By default, we're accumulating 50 events before writing them to the repository.</p>"},{"location":"configure/async/#batch-timeout","title":"Batch timeout","text":"<p>Force push the events to the repository after this time in seconds since the last push:</p> <pre><code>ckanext.event_audit.batch.timeout = 3600\n</code></pre> <p>The default value is 3600 seconds (1 hour). This options is required to ensure that the logs are written to the repository in case of low activity.</p>"},{"location":"configure/cloudwatch/","title":"Cloudwatch","text":"<p>Using Cloudwatch repository requires you to configure the following options in the CKAN configuration file:</p> <pre><code>ckanext.event_audit.cloudwatch.access_key = YOUR_ACCESS_KEY\nckanext.event_audit.cloudwatch.secret_key = YOUR_SECRET_KEY\nckanext.event_audit.cloudwatch.region = YOUR_REGION\n</code></pre> <p>See the AWS documentation for more information on how to obtain these values and configure the AWS Cloudwatch service.</p>"},{"location":"configure/ignore/","title":"Ignore events","text":"<p>The extension provides a various set of configuration options to adjust the behavior of the audit logs.</p> Warning <p>These config options are applicable only for built-in tracking methods (API, Database) and not related to client's usage of the extension.</p>"},{"location":"configure/ignore/#ignoring-categories","title":"Ignoring categories","text":"<p>The extension allows to ignore specific categories of events. To do this, we have to set the following configuration option in the CKAN configuration file:</p> <pre><code>ckanext.event_audit.ignore.categories = test\n</code></pre> <p>By default, we're not ignoring any categories. The <code>categories</code> option is a comma-separated list of categories that should be ignored.</p> <p>Categories are arbitrary strings that can be used to group events.</p>"},{"location":"configure/ignore/#ignoring-actions","title":"Ignoring actions","text":"<p>The extension allows to ignore specific actions. To do this, we have to set the following configuration option in the CKAN configuration file:</p> <pre><code>ckanext.event_audit.ignore.actions = test\n</code></pre> <p>Some actions might be called more frequently than others, and we might not be interested in storing them. The <code>actions</code> option is a comma-separated list of actions that should be ignored.</p> <p>By default, we're excluding next actions from being stored:</p> <ul> <li><code>editable_config_list</code></li> <li><code>editable_config_change</code></li> <li><code>get_site_user</code></li> <li><code>ckanext_pages_list</code></li> <li><code>user_show</code></li> </ul>"},{"location":"configure/ignore/#ignoring-models","title":"Ignoring models","text":"<p>The extension allows to ignore specific models. To do this, we have to set the following configuration option in the CKAN configuration file:</p> <pre><code>ckanext.event_audit.ignore.models = User Package Resource\n</code></pre> <p>By default, we're excluding next models from being stored:</p> <ul> <li><code>Option</code></li> </ul>"},{"location":"configure/tracking/","title":"In-built tracking","text":"<p>There are two built-in trackers in the extension that are enabled by default and work out of the box - API and Database trackers.</p>"},{"location":"configure/tracking/#api-tracker","title":"API tracker","text":"<p>Captures all events that are triggered by the CKAN API. Everything that is called via <code>tk.get_action</code> will be tracked by this tracker, unless it's explicitly ignored by the configuration. See the ignore section for more details.</p> <p>To disable the API tracker, specify this in the configuration file:</p> <pre><code>ckanext.event_audit.track.api = false\n</code></pre> <p>We can ignore specific actions from being tracked by setting the <code>ckanext.event_audit.ignore.actions</code> configuration option. See the ignore section for more details.</p>"},{"location":"configure/tracking/#database-tracker","title":"Database tracker","text":"<p>We're utilising the SQLAlchemy\u2019s event system for tracking database interactions. The audit event creation will be triggered when the model is created, updated, or deleted.</p> <p>To disable the Database tracker, specify this in the configuration file:</p> <pre><code>ckanext.event_audit.track.model = false\n</code></pre> <p>We can ignore specific models from being tracked by setting the <code>ckanext.event_audit.ignore.models</code> configuration option. See the ignore section for more details.</p>"},{"location":"configure/tracking/#custom-trackers","title":"Custom trackers","text":"<p>You can create and write an event anywhere in your codebase.</p> <p>TODO: add link to usage docs</p>"},{"location":"exporters/basic/","title":"Basic","text":"<p>The exporters allow you to export the event audit logs to a different file format.</p> <p>The following exporters are available:</p> <ol> <li>CSV Exporter: Exports the event audit logs to a CSV file.</li> <li>JSON Exporter: Exports the event audit logs to a JSON file.</li> <li>TSV Exporter: Exports the event audit logs to a TSV file.</li> <li>XLSX Exporter: Exports the event audit logs to an XLSX file.</li> </ol> <p>Each exporter has its own configuration options. The configuration options are described in the respective exporter's documentation section.</p>"},{"location":"exporters/basic/#base-exporter-class","title":"Base exporter class","text":"<p>Base class for all exporters.</p> <p>Exporters are used to export a lsit of events to a specific file format.</p>"},{"location":"exporters/basic/#event_audit.exporters.base.AbstractExporter.export","title":"<code>export(events)</code>  <code>abstractmethod</code>","text":"<p>Export events to a specific format.</p> <p>We are not providing a specific return type, because it will depend on the specific exporter implementation.</p> PARAMETER DESCRIPTION <code>events</code> <p>events to export</p> <p> TYPE: <code>Iterable[Event]</code> </p> RETURNS DESCRIPTION <code>Any</code> <p>exported data.</p> <p> TYPE: <code>Any</code> </p>"},{"location":"exporters/basic/#event_audit.exporters.base.AbstractExporter.from_filters","title":"<code>from_filters(filters, repo_name=None)</code>","text":"<p>Export events from a repo using the given filters.</p> <p>If <code>repo_name</code> is not provided, the active repo is used.</p> PARAMETER DESCRIPTION <code>filters</code> <p>search filters.</p> <p> TYPE: <code>Filters</code> </p> <code>repo_name</code> <p>name of the repo to use. Defaults to None.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Any</code> <p>exported data.</p> <p> TYPE: <code>Any</code> </p>"},{"location":"exporters/csv/","title":"CSV exporter","text":""},{"location":"exporters/csv/#event_audit.exporters.csv.CSVExporter.__init__","title":"<code>__init__(delimiter=',', quotechar='\"', quoting=QUOTE_ALL, ignore_fields=None)</code>","text":"<p>CSV exporter.</p> PARAMETER DESCRIPTION <code>delimiter</code> <p>delimiter. Defaults to \",\".</p> <p> TYPE: <code>str</code> DEFAULT: <code>','</code> </p> <code>quotechar</code> <p>quote character. Defaults to '\"'.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'\"'</code> </p> <code>quoting</code> <p>quoting. Defaults to QUOTE_ALL.</p> <p> TYPE: <code>int</code> DEFAULT: <code>QUOTE_ALL</code> </p> <code>ignore_fields</code> <p>fields to ignore. By default we ignore the \"result\" and \"payload\" fields.</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"exporters/csv/#event_audit.exporters.csv.CSVExporter.export","title":"<code>export(events)</code>","text":"<p>Export events to CSV format.</p> PARAMETER DESCRIPTION <code>events</code> <p>events to export.</p> <p> TYPE: <code>Iterable[Event]</code> </p> RETURNS DESCRIPTION <code>str | None</code> <p>str | None: CSV data.</p>"},{"location":"exporters/json/","title":"JSON exporter","text":"<p>               Bases: <code>AbstractExporter</code></p>"},{"location":"exporters/json/#event_audit.exporters.json.JSONExporter.__init__","title":"<code>__init__(stringify=True)</code>","text":"<p>JSON exporter.</p> PARAMETER DESCRIPTION <code>stringify</code> <p>whether to return a string or a dict. By default we return a string.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"exporters/json/#event_audit.exporters.json.JSONExporter.export","title":"<code>export(events)</code>","text":"<p>Export events to JSON format.</p> PARAMETER DESCRIPTION <code>events</code> <p>events to export.</p> <p> TYPE: <code>Iterable[Event]</code> </p> RETURNS DESCRIPTION <code>list[dict[str, Any]] | str | None</code> <p>str | None: JSON data.</p>"},{"location":"exporters/tsv/","title":"TSV exporter","text":""},{"location":"exporters/tsv/#event_audit.exporters.tsv.TSVExporter.__init__","title":"<code>__init__(ignore_fields=None)</code>","text":"<p>TSV exporter.</p> PARAMETER DESCRIPTION <code>ignore_fields</code> <p>fields to ignore. By default we ignore the \"result\" and \"payload\" fields.</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"exporters/xlsx/","title":"XLSX exporter","text":""},{"location":"exporters/xlsx/#event_audit.exporters.xlsx.XLSXExporter.__init__","title":"<code>__init__(file_path, ignore_fields=None)</code>","text":"<p>XLSX exporter.</p> PARAMETER DESCRIPTION <code>file_path</code> <p>path to the file or BytesIO object to write the XLSX data.</p> <p> TYPE: <code>str | BytesIO</code> </p> <code>ignore_fields</code> <p>fields to ignore. By default we ignore the \"result\" and \"payload\" fields.</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"exporters/xlsx/#event_audit.exporters.xlsx.XLSXExporter.export","title":"<code>export(events)</code>","text":"<p>Export events to a XLSX file.</p> PARAMETER DESCRIPTION <code>events</code> <p>events to export.</p> <p> TYPE: <code>Iterable[Event]</code> </p> RETURNS DESCRIPTION <code>str | BytesIO | None</code> <p>str | BytesIO | None: path to the file or BytesIO object if the</p> <code>str | BytesIO | None</code> <p>export was successful, None otherwise.</p>"},{"location":"repositories/abstract/","title":"Abstract","text":""},{"location":"repositories/abstract/#event_audit.repositories.base.AbstractRepository.__new__","title":"<code>__new__(*args, **kwargs)</code>","text":"<p>Singleton pattern implementation.</p>"},{"location":"repositories/abstract/#event_audit.repositories.base.AbstractRepository.build_event","title":"<code>build_event(event_data)</code>","text":"<p>Build an event object from the provided data.</p> PARAMETER DESCRIPTION <code>event_data</code> <p>event data.</p> <p> TYPE: <code>EventData</code> </p> RETURNS DESCRIPTION <code>Event</code> <p>types.Event: event object.</p>"},{"location":"repositories/abstract/#event_audit.repositories.base.AbstractRepository.enqueue_event","title":"<code>enqueue_event(event)</code>","text":"<p>Enqueue an event to be written to the repository.</p> PARAMETER DESCRIPTION <code>event</code> <p>event to write.</p> <p> TYPE: <code>Event</code> </p> RETURNS DESCRIPTION <code>Result</code> <p>types.Result: result of the operation.</p>"},{"location":"repositories/abstract/#event_audit.repositories.base.AbstractRepository.filter_events","title":"<code>filter_events(filters)</code>  <code>abstractmethod</code>","text":"<p>Filters events based on provided filter criteria.</p> PARAMETER DESCRIPTION <code>filters</code> <p>filters to apply.</p> <p> TYPE: <code>Filters</code> </p>"},{"location":"repositories/abstract/#event_audit.repositories.base.AbstractRepository.get_event","title":"<code>get_event(event_id)</code>  <code>abstractmethod</code>","text":"<p>Retrieves a single event from the repository.</p> PARAMETER DESCRIPTION <code>event_id</code> <p>event ID.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Event | None</code> <p>types.Event | None: event object or None if not found.</p>"},{"location":"repositories/abstract/#event_audit.repositories.base.AbstractRepository.get_name","title":"<code>get_name()</code>  <code>abstractmethod</code> <code>classmethod</code>","text":"<p>Return the name of the repository.</p> RETURNS DESCRIPTION <code>str</code> <p>name of the repository.</p> <p> TYPE: <code>str</code> </p>"},{"location":"repositories/abstract/#event_audit.repositories.base.AbstractRepository.remove_all_events","title":"<code>remove_all_events()</code>","text":"<p>Removes all events from the repository.</p> RETURNS DESCRIPTION <code>Result</code> <p>types.Result: result of the operation.</p>"},{"location":"repositories/abstract/#event_audit.repositories.base.AbstractRepository.remove_event","title":"<code>remove_event(event_id)</code>","text":"<p>Removes a single event from the repository.</p> PARAMETER DESCRIPTION <code>event_id</code> <p>event ID.</p> <p> TYPE: <code>Any</code> </p> RETURNS DESCRIPTION <code>Result</code> <p>types.Result: result of the operation.</p>"},{"location":"repositories/abstract/#event_audit.repositories.base.AbstractRepository.test_connection","title":"<code>test_connection()</code>  <code>abstractmethod</code>","text":"<p>Test the connection to the repository.</p> RETURNS DESCRIPTION <code>bool</code> <p>whether the connection was successful.</p> <p> TYPE: <code>bool</code> </p>"},{"location":"repositories/abstract/#event_audit.repositories.base.AbstractRepository.write_event","title":"<code>write_event(event)</code>  <code>abstractmethod</code>","text":"<p>Writes a single event to the repository.</p> PARAMETER DESCRIPTION <code>event</code> <p>event to write.</p> <p> TYPE: <code>Event</code> </p> RETURNS DESCRIPTION <code>Result</code> <p>types.Result: result of the operation.</p>"},{"location":"repositories/abstract/#event_audit.repositories.base.AbstractRepository.write_events","title":"<code>write_events(events)</code>","text":"<p>Write multiple events to the repository.</p> PARAMETER DESCRIPTION <code>events</code> <p>events to write.</p> <p> TYPE: <code>Iterable[Event]</code> </p> RETURNS DESCRIPTION <code>Result</code> <p>types.Result: result of the operation.</p>"},{"location":"repositories/basic/","title":"Basic","text":"<p>Repositories are the storages where the event audit logs are stored. There are a few basic repositories, that you can use out of the box:</p> <ol> <li><code>redis</code> - the default repository, stores logs in Redis.</li> <li><code>postgres</code> - stores logs in a PostgreSQL database.</li> <li><code>cloudwatch</code> - stores logs in AWS CloudWatch.</li> </ol> <p>You can also implement your own repository. To do this, you need to create a new class that inherits from the <code>AbstractRepository</code> class and implement all the required methods.</p> <p>See the abstract repository documentation and custom repository documentation for more information.</p>"},{"location":"repositories/cloudwatch/","title":"Cloudwatch repository","text":""},{"location":"repositories/cloudwatch/#event_audit.repositories.cloudwatch.CloudWatchRepository.__init__","title":"<code>__init__(credentials=None, log_group='/ckan/event-audit', log_stream='event-audit-stream')</code>","text":"<p>CloudWatch repository.</p> PARAMETER DESCRIPTION <code>credentials</code> <p>AWS credentials. If not provided, the extension configuration will be used.</p> <p> TYPE: <code>AWSCredentials | None</code> DEFAULT: <code>None</code> </p> <code>log_group</code> <p>CloudWatch log group name.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'/ckan/event-audit'</code> </p> <code>log_stream</code> <p>CloudWatch log stream name.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'event-audit-stream'</code> </p>"},{"location":"repositories/cloudwatch/#event_audit.repositories.cloudwatch.CloudWatchRepository.filter_events","title":"<code>filter_events(filters)</code>","text":"<p>Filters events based on provided filter criteria.</p> PARAMETER DESCRIPTION <code>filters</code> <p>filters to apply.</p> <p> TYPE: <code>Filters</code> </p>"},{"location":"repositories/cloudwatch/#event_audit.repositories.cloudwatch.CloudWatchRepository.get_event","title":"<code>get_event(event_id)</code>","text":"<p>Retrieves a single event from the repository.</p> PARAMETER DESCRIPTION <code>event_id</code> <p>event ID.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Optional[Event]</code> <p>types.Event | None: event object or None if not found.</p>"},{"location":"repositories/cloudwatch/#event_audit.repositories.cloudwatch.CloudWatchRepository.remove_all_events","title":"<code>remove_all_events()</code>","text":"<p>Removes all events from the repository.</p> RETURNS DESCRIPTION <code>Result</code> <p>types.Result: result of the operation.</p>"},{"location":"repositories/cloudwatch/#event_audit.repositories.cloudwatch.CloudWatchRepository.remove_event","title":"<code>remove_event(event_id)</code>","text":"<p>Remove operation is not supported for CloudWatch logs.</p> <p>As of today, you cannot delete a single log event from CloudWatch log stream, the alternative will be using Lambda functions: set a Lambda function trigger, filter all logs, then write the remaining logs to a new log group/stream, then delete the original log stream.</p> <p>It's potentially too expensive to do this operation, so it's not implemented.</p> Note <p>The remove single event operation is not supported</p>"},{"location":"repositories/cloudwatch/#event_audit.repositories.cloudwatch.CloudWatchRepository.test_connection","title":"<code>test_connection()</code>","text":"<p>Tests the connection to the repository.</p> RETURNS DESCRIPTION <code>bool</code> <p>whether the connection was successful.</p> <p> TYPE: <code>bool</code> </p>"},{"location":"repositories/cloudwatch/#event_audit.repositories.cloudwatch.CloudWatchRepository.write_event","title":"<code>write_event(event)</code>","text":"<p>Writes a single event to the repository.</p> PARAMETER DESCRIPTION <code>event</code> <p>event to write.</p> <p> TYPE: <code>Event</code> </p> RETURNS DESCRIPTION <code>Result</code> <p>types.Result: result of the operation.</p>"},{"location":"repositories/custom/","title":"Custom","text":"<p>Here you can see a naive example of how to implement a custom repository, that stores logs in a json file.</p> <pre><code>from ckanext.event_audit.repositories import AbstractRepository\n\nclass FileRepository(AbstractRepository):\n    def __init__(self, file_path: str | None = None):\n        self.file_path = file_path or '/tmp/event_audit.json'\n\n    def log(self) -&gt; str:\n        return \"file\"\n\n    def write_event(self, event: types.Event) -&gt; types.Result:\n        with open(self.file_path, 'a') as f:\n            data = json.load(f)\n            data[event.id] = event.model_dump()\n\n            f.write(json.dumps(data))\n\n        return types.Result(success=True)\n\n    def get_event(self, event_id: Any) -&gt; types.Event | None:\n        with open(self.file_path, 'r') as f:\n            data = json.load(f)\n\n            if event_id in data:\n                return types.Event.model_validate(data[event_id])\n\n        return None\n\n    def filter_events(self, filters: types.Filters) -&gt; list[types.Event]:\n        with open(self.file_path, 'r') as f:\n            data = json.load(f)\n\n            result = []\n\n            for event in data.values():\n                if _match_filters(event, filters):\n                    result.append(types.Event.model_validate(event))\n\n            return result\n\n    def _match_filters(self, event: types.EventData, filters: types.Filters) -&gt; bool:\n        ...\n\n    def test_connection(self) -&gt; types.Result:\n        return types.Result(success=True)\n</code></pre> <p>In this version, it doesn't implement the <code>remove_event</code> and <code>remove_events</code> methods, but you can implement them in the same way as the other methods. If the repository able to remove one or multiple events, it must inherits from the respective class - <code>RemoveSingle</code> or <code>RemoveAll</code>. For example:</p> <pre><code>import os\n\nfrom ckanext.event_audit.repositories import AbstractRepository, RemoveSingle, RemoveAll\n\nclass FileRepository(AbstractRepository, RemoveSingle, RemoveAll):\n    ...\n\n    def remove_event(self, event_id: Any) -&gt; types.Result:\n        with open(self.file_path, 'w') as f:\n            data = json.load(f)\n\n            if event_id in data:\n                del data[event_id]\n                f.write(json.dumps(data))\n\n                return types.Result(success=True)\n\n        return types.Result(success=False, message='Event not found')\n\n    def remove_events(self, filters: types.Filters) -&gt; types.Result:\n        \"\"\"Removes the file if exists.\"\"\"\n\n        if os.path.exists(self.file_path):\n            os.remove(self.file_path)\n\n        return types.Result(success=True)\n</code></pre>"},{"location":"repositories/postgres/","title":"Postgres repository","text":""},{"location":"repositories/postgres/#event_audit.repositories.postgres.PostgresRepository.filter_events","title":"<code>filter_events(filters)</code>","text":"<p>Filters events based on provided filter criteria.</p> PARAMETER DESCRIPTION <code>filters</code> <p>filters to apply.</p> <p> TYPE: <code>Filters</code> </p>"},{"location":"repositories/postgres/#event_audit.repositories.postgres.PostgresRepository.get_event","title":"<code>get_event(event_id)</code>","text":"<p>Retrieves a single event from the repository.</p> PARAMETER DESCRIPTION <code>event_id</code> <p>event ID.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Event | None</code> <p>types.Event | None: event object or None if not found.</p>"},{"location":"repositories/postgres/#event_audit.repositories.postgres.PostgresRepository.remove_all_events","title":"<code>remove_all_events()</code>","text":"<p>Removes all events from the repository.</p> RETURNS DESCRIPTION <code>Result</code> <p>types.Result: result of the operation.</p>"},{"location":"repositories/postgres/#event_audit.repositories.postgres.PostgresRepository.remove_event","title":"<code>remove_event(event_id, session=None, defer_commit=False)</code>","text":"<p>Removes a single event from the repository.</p> PARAMETER DESCRIPTION <code>event_id</code> <p>event ID.</p> <p> TYPE: <code>str</code> </p> <code>session</code> <p>session to use.</p> <p> TYPE: <code>Session | None</code> DEFAULT: <code>None</code> </p> <code>defer_commit</code> <p>whether to defer the commit.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Result</code> <p>types.Result: result of the operation.</p>"},{"location":"repositories/postgres/#event_audit.repositories.postgres.PostgresRepository.test_connection","title":"<code>test_connection()</code>","text":"<p>Tests the connection to the repository.</p> RETURNS DESCRIPTION <code>bool</code> <p>whether the connection was successful.</p> <p> TYPE: <code>bool</code> </p>"},{"location":"repositories/postgres/#event_audit.repositories.postgres.PostgresRepository.write_event","title":"<code>write_event(event, session=None, defer_commit=False)</code>","text":"<p>Writes a single event to the repository.</p> PARAMETER DESCRIPTION <code>event</code> <p>event to write.</p> <p> TYPE: <code>Event</code> </p> <code>session</code> <p>session to use.</p> <p> TYPE: <code>Session | None</code> DEFAULT: <code>None</code> </p> <code>defer_commit</code> <p>whether to defer the commit.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Result</code> <p>types.Result: result of the operation.</p>"},{"location":"repositories/postgres/#event_audit.repositories.postgres.PostgresRepository.write_events","title":"<code>write_events(events)</code>","text":"<p>Write multiple events to the repository.</p> PARAMETER DESCRIPTION <code>events</code> <p>events to write.</p> <p> TYPE: <code>Iterable[Event]</code> </p> RETURNS DESCRIPTION <code>Result</code> <p>types.Result: result of the operation.</p>"},{"location":"repositories/redis/","title":"Redis repository","text":""},{"location":"repositories/redis/#event_audit.repositories.redis.RedisRepository.filter_events","title":"<code>filter_events(filters)</code>","text":"<p>Filters events based on patterns generated from the provided filters.</p> PARAMETER DESCRIPTION <code>filters</code> <p>filters to apply.</p> <p> TYPE: <code>Filters</code> </p>"},{"location":"repositories/redis/#event_audit.repositories.redis.RedisRepository.get_event","title":"<code>get_event(event_id)</code>","text":"<p>Get an event by its ID.</p> PARAMETER DESCRIPTION <code>event_id</code> <p>event ID.</p> <p> TYPE: <code>float</code> </p>"},{"location":"repositories/redis/#event_audit.repositories.redis.RedisRepository.remove_all_events","title":"<code>remove_all_events()</code>","text":"<p>Removes all events from the repository.</p> RETURNS DESCRIPTION <code>Result</code> <p>types.Result: result of the operation.</p>"},{"location":"repositories/redis/#event_audit.repositories.redis.RedisRepository.remove_event","title":"<code>remove_event(event_id)</code>","text":"<p>Removes an event by its ID.</p> PARAMETER DESCRIPTION <code>event_id</code> <p>event ID.</p> <p> TYPE: <code>float</code> </p> RETURNS DESCRIPTION <code>Result</code> <p>types.Result: result of the operation.</p>"},{"location":"repositories/redis/#event_audit.repositories.redis.RedisRepository.test_connection","title":"<code>test_connection()</code>","text":"<p>Tests the connection to the repository.</p> RETURNS DESCRIPTION <code>bool</code> <p>whether the connection was successful.</p> <p> TYPE: <code>bool</code> </p>"},{"location":"repositories/redis/#event_audit.repositories.redis.RedisRepository.write_event","title":"<code>write_event(event)</code>","text":"<p>Writes an event to Redis.</p> PARAMETER DESCRIPTION <code>event</code> <p>event to write.</p> <p> TYPE: <code>Event</code> </p> RETURNS DESCRIPTION <code>Result</code> <p>types.Result: result of the operation.</p>"},{"location":"repositories/test/","title":"Test","text":""},{"location":"repositories/test/#removesingle-class","title":"RemoveSingle class","text":"<p>If repository supports removing single log entries, it should inherit the <code>RemoveSingle</code> class.</p> <p>Mark the repository as supporting remove single event.</p> <p>If the repository supports remove single event, it should inherit from this class.</p> <p>Mark the repository as supporting remove all events.</p> <p>If the repository supports remove all events, it should inherit from this class.</p>"}]}