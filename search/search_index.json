{"config":{"lang":["en"],"separator":"[\\s\\-\\.\\_]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#ckanext-event-audit","title":"ckanext-event-audit","text":"<p>This extension will capture and retain a comprehensive record of all changes within a CKAN app. </p>"},{"location":"#developer-installation","title":"Developer installation","text":"<p>To install ckanext-event-audit for development, activate your CKAN virtualenv and do:</p> <pre><code>git clone https://github.com//ckanext-event-audit.git\ncd ckanext-event-audit\npip install -e .\npip install -r dev-requirements.txt\n</code></pre>"},{"location":"#register-new-repositories","title":"Register new repositories","text":"<p>There are few repositories available by default, but you can register new repositories to store the events. Think of it as a way to store the events in different databases or services. We don't want to limit the extension to a specific storage. The main idea is to provide a way to store, retrieve, and filter the events.</p> <p>To register a new repository, you need to define a repository class and register it.</p>"},{"location":"#defining-the-repository-class","title":"Defining the repository class","text":"<p>To register a new repository, you need to define a repository class that inherits from <code>AbstractRepository</code> and implements the following methods: <code>write_event</code>, <code>get_event</code>, and <code>filter_events</code>.</p> <p>For example:</p> <pre><code>from ckanext.event_audit.repositories import AbstractRepository\nfrom ckanext.event_audit import types\n\n\nclass MyRepository(AbstractRepository):\n    name = \"my_repository\"\n\n    @classmethod\n    def get_name(cls) -&gt; str:\n        return \"my_repository\"\n\n    def write_event(self, event: types.Event) -&gt; types.WriteStatus:\n        pass\n\n    def get_event(self, event_id: str) -&gt; types.Event | None:\n        pass\n\n    def filter_events(self, filters: types.Filters) -&gt; list[types.Event]:\n        pass\n</code></pre> <p>See the existing repositories as examples (<code>ckanext/event_audit/repositories/</code>).</p>"},{"location":"#registering-the-repository","title":"Registering the repository","text":"<p>To register the new repository, you need to use a IEventAudit interface and the <code>register_repository</code> method.</p> <p>For example:</p> <pre><code>from ckanext.event_audit.interfaces import IEventAudit\nfrom ckanext.your_extension.repositories import MyRepository\n\nclass MyRepositoryPlugin(plugins.SingletonPlugin):\n    ...\n    plugins.implements(IEventAudit, inherit=True)\n\n    # IEventAudit\n\n    def register_repository(self) -&gt; dict[str, type[AbstractRepository]]:\n        return {\n            MyRepository.get_name(): MyRepository,\n        }\n</code></pre>"},{"location":"#tests","title":"Tests","text":"<p>To run the tests, do:</p> <pre><code>pytest --ckan-ini=test.ini\n</code></pre>"},{"location":"#license","title":"License","text":"<p>AGPL</p>"}]}