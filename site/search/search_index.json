{"config":{"lang":["en"],"separator":"[\\s\\-\\.\\_]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#ckanext-event-audit","title":"ckanext-event-audit","text":"<p>This extension will capture and retain a comprehensive record of all changes within a CKAN app. </p>"},{"location":"#developer-installation","title":"Developer installation","text":"<p>To install ckanext-event-audit for development, activate your CKAN virtualenv and do:</p> <pre><code>git clone https://github.com/DataShades/ckanext-event-audit.git\ncd ckanext-event-audit\npip install -e .\npip install -r dev-requirements.txt\n</code></pre>"},{"location":"#register-new-repositories","title":"Register new repositories","text":"<p>There are few repositories available by default, but you can register new repositories to store the events. Think of it as a way to store the events in different databases or services. We don't want to limit the extension to a specific storage. The main idea is to provide a way to store, retrieve, and filter the events.</p> <p>To register a new repository, you need to define a repository class and register it.</p>"},{"location":"#defining-the-repository-class","title":"Defining the repository class","text":"<p>To register a new repository, you need to define a repository class that inherits from <code>AbstractRepository</code> and implements the following methods: <code>write_event</code>, <code>get_event</code>, and <code>filter_events</code>.</p> <p>For example:</p> <pre><code>from ckanext.event_audit.repositories import AbstractRepository\nfrom ckanext.event_audit import types\n\n\nclass MyRepository(AbstractRepository):\n    name = \"my_repository\"\n\n    @classmethod\n    def get_name(cls) -&gt; str:\n        return \"my_repository\"\n\n    def write_event(self, event: types.Event) -&gt; types.Result:\n        pass\n\n    def get_event(self, event_id: str) -&gt; types.Event | None:\n        pass\n\n    def filter_events(self, filters: types.Filters) -&gt; list[types.Event]:\n        pass\n</code></pre> <p>See the existing repositories as examples (<code>ckanext/event_audit/repositories/</code>).</p>"},{"location":"#registering-the-repository","title":"Registering the repository","text":"<p>To register the new repository, you need to use a IEventAudit interface and the <code>register_repository</code> method.</p> <p>For example:</p> <pre><code>from ckanext.event_audit.interfaces import IEventAudit\nfrom ckanext.your_extension.repositories import MyRepository\n\nclass MyRepositoryPlugin(plugins.SingletonPlugin):\n    ...\n    plugins.implements(IEventAudit, inherit=True)\n\n    # IEventAudit\n\n    def register_repository(self) -&gt; dict[str, type[AbstractRepository]]:\n        return {\n            MyRepository.get_name(): MyRepository,\n        }\n</code></pre>"},{"location":"#cloudwatch-repository","title":"CloudWatch repository","text":"<p>There is a repository to store the events in AWS CloudWatch. To use it, you'll have to provide AWS credentials via CKAN configuration.</p> <pre><code>ckanext.event_audit.cloudwatch.access_key = xxx\nckanext.event_audit.cloudwatch.secret_key = xxx\nckanext.event_audit.cloudwatch.region = ap-southeast-2\n</code></pre>"},{"location":"#tests","title":"Tests","text":"<p>To run the tests, do:</p> <pre><code>pytest --ckan-ini=test.ini\n</code></pre>"},{"location":"#license","title":"License","text":"<p>AGPL</p>"},{"location":"install/","title":"Installation","text":""},{"location":"install/#requirements","title":"Requirements","text":"<p>Compatibility with core CKAN versions:</p> CKAN version Compatible? 2.9 no 2.10 yes 2.11 yes master yes"},{"location":"install/#installation_1","title":"Installation","text":"<ol> <li> <p>Install the extension from <code>PyPI</code>:     <pre><code>pip install ckanext-event-audit\n</code></pre></p> </li> <li> <p>Enable the plugin in your CKAN configuration file (e.g. <code>ckan.ini</code> or <code>production.ini</code>):     <pre><code>ckan.plugins = ... event_audit ...\n</code></pre></p> </li> <li> <p>Run DB migrations:     <pre><code>ckan db upgrade -p event_audit\n</code></pre></p> </li> <li> <p>Configure the extension up to your needs and you're ready to go. See the documentation for more details about the configuration options.</p> </li> </ol>"},{"location":"configure/async/","title":"Asynchronous processing","text":"<p>To avoid blocking the main thread, the extension uses a separate thread to write the audit logs. A separate thread will be started automatically along with the CKAN application.</p> <p>The thread is responsible for storing the logs in the configured repository.</p> <p>By default, we're using the threaded mode. However, if you want to disable the threaded mode, you can do this by setting the following configuration option in the CKAN configuration file:</p> <pre><code>ckanext.event_audit.threaded_mode = false\n</code></pre> <p>Disabling the threaded mode will cause the extension to write the logs in the main thread. This can be useful for debugging purposes.</p> <p>Note, that pairing it with the <code>Cloudwatch</code> repository is not recommended, as it can block the main thread for a long time. Network operations can be slow and can cause the application to hang for a while.</p> <p>If your custom repository involves a network operations, it's recommended to keep the threaded mode enabled.</p>"},{"location":"configure/async/#batch-size","title":"Batch size","text":"<p>The extension writes the logs in batches. The batch size can be adjusted by setting the following configuration option in the CKAN configuration file:</p> <pre><code>ckanext.event_audit.batch.size = 50\n</code></pre> <p>By default, we're accumulating 50 events before writing them to the repository.</p>"},{"location":"configure/async/#batch-timeout","title":"Batch timeout","text":"<p>Force push the events to the repository after this time in seconds since the last push:</p> <pre><code>ckanext.event_audit.batch.timeout = 3600\n</code></pre> <p>The default value is 3600 seconds (1 hour). This options is required to ensure that the logs are written to the repository in case of low activity.</p>"},{"location":"configure/cloudwatch/","title":"Cloudwatch","text":"<p>Using Cloudwatch repository requires you to configure the following options in the CKAN configuration file:</p> <pre><code>ckanext.event_audit.cloudwatch.access_key = YOUR_ACCESS_KEY\nckanext.event_audit.cloudwatch.secret_key = YOUR_SECRET_KEY\nckanext.event_audit.cloudwatch.region = YOUR_REGION\n</code></pre> <p>TBD: Add more details about setting up on the AWS side.</p>"},{"location":"configure/configuration/","title":"Configuration","text":"<p>The event audit logs are stored in a configurable storages, we call them repositories.</p> <p>The default repository is <code>redis</code>, but it can be changed to a different one. To do this, we have to set the following configuration options in the CKAN configuration file:</p> <pre><code>ckanext.event_audit.active_repo = postgres\n</code></pre> <p>The following repositories are available:</p> <ol> <li><code>redis</code> - the default repository, stores logs in Redis.</li> <li><code>postgres</code> - stores logs in a PostgreSQL database.</li> <li><code>cloudwatch</code> - stores logs in AWS CloudWatch.</li> </ol> <p>If the <code>cloudwatch</code> repository is used, the extension will automatically create a log group in CloudWatch. Also, check the CloudWatch repository documentation for additional configuration options.</p>"},{"location":"configure/ignore/","title":"Ignore","text":"<p>The extension provides a various set of configuration options to adjust the behavior of the audit logs.</p> Warning <p>These config options are applicable only for built-in tracking methods (API, Database) and not related to client's usage of the extension.</p>"},{"location":"configure/ignore/#ignoring-categories","title":"Ignoring categories","text":"<p>The extension allows to ignore specific categories of events. To do this, we have to set the following configuration option in the CKAN configuration file:</p> <pre><code>ckanext.event_audit.ignore.categories = test\n</code></pre> <p>By default, we're not ignoring any categories. The <code>categories</code> option is a comma-separated list of categories that should be ignored.</p> <p>Categories are arbitrary strings that can be used to group events. </p>"},{"location":"configure/ignore/#ignoring-actions","title":"Ignoring actions","text":"<p>The extension allows to ignore specific actions. To do this, we have to set the following configuration option in the CKAN configuration file:</p> <pre><code>ckanext.event_audit.ignore.actions = test\n</code></pre> <p>Some actions might be called more frequently than others, and we might not be interested in storing them. The <code>actions</code> option is a comma-separated list of actions that should be ignored.</p> <p>By default, we're excluding next actions from being stored:</p> <ul> <li><code>editable_config_list</code></li> <li><code>editable_config_change</code></li> <li><code>get_site_user</code></li> <li><code>ckanext_pages_list</code></li> <li><code>user_show</code></li> </ul>"},{"location":"configure/ignore/#ignoring-models","title":"Ignoring models","text":"<p>The extension allows to ignore specific models. To do this, we have to set the following configuration option in the CKAN configuration file:</p> <pre><code>ckanext.event_audit.ignore.models = User Package Resource\n</code></pre> <p>By default, we're excluding next models from being stored:</p> <ul> <li><code>Option</code></li> </ul>"},{"location":"configure/tracking/","title":"Tracking","text":"<p>There are two built-in trackers in the extension that are enabled by default and work out of the box - API and Database trackers.</p>"},{"location":"configure/tracking/#api-tracker","title":"API tracker","text":"<p>Captures all events that are triggered by the CKAN API. Everything that is called via <code>tk.get_action</code> will be tracked by this tracker, unless it's explicitly ignored by the configuration. See the ignore section for more details.</p> <p>To disable the API tracker, specify this in the configuration file:</p> <pre><code>ckanext.event_audit.track.api = false\n</code></pre> <p>We can ignore specific actions from being tracked by setting the <code>ckanext.event_audit.ignore.actions</code> configuration option. See the ignore section for more details.</p>"},{"location":"configure/tracking/#database-tracker","title":"Database tracker","text":"<p>We're utilising the SQLAlchemy\u2019s event system for tracking database interactions. The audit event creation will be triggered when the model is created, updated, or deleted.</p> <p>To disable the Database tracker, specify this in the configuration file:</p> <pre><code>ckanext.event_audit.track.model = false\n</code></pre> <p>We can ignore specific models from being tracked by setting the <code>ckanext.event_audit.ignore.models</code> configuration option. See the ignore section for more details.</p>"},{"location":"configure/tracking/#custom-trackers","title":"Custom trackers","text":"<p>You can create and write an event anywhere in your codebase. </p> <p>TODO: add link to usage docs</p>"}]}